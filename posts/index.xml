<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - BK's Blogs</title><link>https://cslgbk.github.io/posts/</link><description>所有文章 | BK's Blogs</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>cslgbk@126.com (bk)</managingEditor><webMaster>cslgbk@126.com (bk)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 24 Feb 2022 23:44:05 +0800</lastBuildDate><atom:link href="https://cslgbk.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Clock RTL Design Style Guide</title><link>https://cslgbk.github.io/clock-rtl-design-style-guide/</link><pubDate>Thu, 24 Feb 2022 23:44:05 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/clock-rtl-design-style-guide/</guid><description><![CDATA[<h3 id="时钟">时钟</h3>
<ul>
<li>
<p>将时钟电路集中在一个模块</p>
</li>
<li>
<p>利用时钟树实现时钟均衡</p>
</li>
<li>
<p>时钟门控</p>
</li>
<li>
<p>多时钟系统</p>
</li>
</ul>]]></description></item><item><title>Initial Reset RTL Design Style Guide</title><link>https://cslgbk.github.io/initial-reset-rtl-design-style-guide/</link><pubDate>Sun, 07 Nov 2021 19:02:56 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/initial-reset-rtl-design-style-guide/</guid><description><![CDATA[<h3 id="复位">复位</h3>
<ul>
<li>
<p>使用异步复位</p>
</li>
<li>
<p>复位信号冒险</p>
</li>
<li>
<p>外部噪声对复位信号的影响</p>
</li>
</ul>]]></description></item><item><title>Synchronous design - RTL Design Style Guide</title><link>https://cslgbk.github.io/synchronous-design-rtl-design-style-guide/</link><pubDate>Sun, 07 Nov 2021 18:37:19 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/synchronous-design-rtl-design-style-guide/</guid><description>&lt;h3 id="同步设计">同步设计&lt;/h3></description></item><item><title>RTL基本设计原则-RTL Design Style Guide笔记</title><link>https://cslgbk.github.io/%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99-rtl-design-style-guide%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 04 Oct 2021 21:48:04 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99-rtl-design-style-guide%E7%AC%94%E8%AE%B0/</guid><description><![CDATA[<h3 id="rtl基本设计原则">RTL基本设计原则</h3>
<ul>
<li>
<p>RTL命名惯例</p>
</li>
<li>
<p>同步设计</p>
</li>
<li>
<p>复位</p>
</li>
<li>
<p>时钟</p>
</li>
<li>
<p>异步电路处理</p>
</li>
<li>
<p>层次化设计</p>
</li>
</ul>]]></description></item><item><title>立即断言 Immediate Assertion笔记</title><link>https://cslgbk.github.io/%E7%AB%8B%E5%8D%B3%E6%96%AD%E8%A8%80-immediate-assertion-%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 01 Oct 2021 14:02:29 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/%E7%AB%8B%E5%8D%B3%E6%96%AD%E8%A8%80-immediate-assertion-%E7%AC%94%E8%AE%B0/</guid><description><![CDATA[<h3 id="1断言类型">1.断言类型</h3>
<p>• 立即断言 Immediate Assertion</p>
<p>• 并发断言 Concurrent Assertion</p>
<p>• 递归断言 Deferred Assertion</p>
<h3 id="2立即断言">2.立即断言</h3>
<p>• 执行不消耗时间</p>
<p>• 可在指定位置执行</p>
<p>• 可以像if一样使用</p>]]></description></item><item><title>vim基本用法</title><link>https://cslgbk.github.io/vim%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link><pubDate>Sun, 06 Jun 2021 20:30:47 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/vim%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid><description><![CDATA[<p><font size=3>原文链接：<a href="https://blog.csdn.net/scaleqiao/article/details/45153379" target="_blank" rel="noopener noreffer">https://blog.csdn.net/scaleqiao/article/details/45153379</a>
</font></p>]]></description></item><item><title>自动化生成agent代码</title><link>https://cslgbk.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%94%9F%E6%88%90agent%E4%BB%A3%E7%A0%81/</link><pubDate>Sun, 16 May 2021 14:38:00 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/%E8%87%AA%E5%8A%A8%E5%8C%96%E7%94%9F%E6%88%90agent%E4%BB%A3%E7%A0%81/</guid><description><![CDATA[<h3 id="1总体思路">1.总体思路</h3>
<p><font size=3/>在搭建验证框架时经常要输入很多重复性的代码，有两种快速获得验证的方法，一种是复制原有的框架代码，在代码上面修改，一种是利用脚本语言快速生成代码。本文通过python脚本，快速生成agent的代码，提高工作效率。</font></p>]]></description></item><item><title>含寄存器模型验证结构搭建</title><link>https://cslgbk.github.io/%E5%90%AB%E5%AF%84%E5%AD%98%E5%99%A8%E6%A8%A1%E5%9E%8B%E9%AA%8C%E8%AF%81%E7%BB%93%E6%9E%84%E7%9A%84%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 21 Apr 2021 16:00:48 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/%E5%90%AB%E5%AF%84%E5%AD%98%E5%99%A8%E6%A8%A1%E5%9E%8B%E9%AA%8C%E8%AF%81%E7%BB%93%E6%9E%84%E7%9A%84%E6%90%AD%E5%BB%BA/</guid><description>&lt;p>寄存器模型中存储了DUT寄存器中的地址和数据信息，方便寄存器的读写，简化参考模型，便于覆盖率收集等特点。本文以MCDF的控制寄存器为例搭建含有寄存器模型的验证结构。&lt;/p></description></item><item><title>正态分布随机化item</title><link>https://cslgbk.github.io/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E9%9A%8F%E6%9C%BAitem/</link><pubDate>Mon, 12 Apr 2021 10:33:21 +0800</pubDate><author>作者</author><guid>https://cslgbk.github.io/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E9%9A%8F%E6%9C%BAitem/</guid><description><![CDATA[<h3 id="1总体思路">1.总体思路</h3>
<p><font size=3/>通过正态分布generator产生数据传递item，最终通过driver将数据打印至日志文件，利用python脚本绘制分布图，检验产生数据是否正确</font></p>]]></description></item></channel></rss>