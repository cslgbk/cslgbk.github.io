<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 验证菜鸟's Blogs</title><link>https://cslgbk.github.io/posts/</link><description>Recent content in Posts on 验证菜鸟's Blogs</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 12 May 2021 05:33:21 +0800</lastBuildDate><atom:link href="https://cslgbk.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>正态分布随机化item</title><link>https://cslgbk.github.io/posts/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90agnet%E4%BB%A3%E7%A0%81/</link><pubDate>Wed, 12 May 2021 05:33:21 +0800</pubDate><guid>https://cslgbk.github.io/posts/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90agnet%E4%BB%A3%E7%A0%81/</guid><description>1.总体思路 在搭建验证框架时经常要输入很多重复性的代码，有两种快速获得验证的方法，一种是复制原有的框架代码，在代码上面修改，一种是利用脚本语言快速生成代码。本文通过python脚本，快速生成agent的代码，提高工作效率。2.python脚本 利用open、write函数创建SV文件，写入UVM框架代码。code_gen.py:#coding=utf-8 import sys name = input(&amp;quot;input agentname:\n&amp;quot;) f = open(name+&amp;quot;_pkg.sv&amp;quot;, 'w+', encoding=&amp;quot;utf-8&amp;quot;) f.write(&amp;quot;`include \&amp;quot;uvm_macros.svh\&amp;quot;\n\n&amp;quot;) f.write(&amp;quot;package &amp;quot;+name+&amp;quot;_pkg;\n\n&amp;quot;) f.write(&amp;quot;import uvm_pkg::*;\n\n&amp;quot;) name_trans = name + &amp;quot;_trans&amp;quot; f.write(&amp;quot;class &amp;quot;+name_trans+&amp;quot; extends uvm_sequence_item;\n&amp;quot;) f.write(&amp;quot;\tfunction new(string name=\&amp;quot;&amp;quot;+name_trans+&amp;quot;\&amp;quot;);\n&amp;quot;) f.write(&amp;quot;\t\tsuper.new(name);\n&amp;quot;) f.write(&amp;quot;\tendfunction\n\n&amp;quot;) f.write(&amp;quot;\t//输入变量\n&amp;quot;) f.write(&amp;quot;\trand ;\n&amp;quot;) f.write(&amp;quot;\trand ;\n&amp;quot;) f.write(&amp;quot;\t`uvm_object_utils_begin(&amp;quot;+name_trans+&amp;quot;)\n&amp;quot;) f.write(&amp;quot;\t\t`uvm_field_\n&amp;quot;) f.write(&amp;quot;\t\t`uvm_field_\n&amp;quot;) f.write(&amp;quot;\t`uvm_object_utils_end\n&amp;quot;) f.write(&amp;quot;\nendclass\n&amp;quot;) name_seq = name+&amp;quot;_seq&amp;quot; f.write(&amp;quot;\nclass &amp;quot;+name_seq+&amp;quot; extends uvm_sequence;\n&amp;quot;) f.write(&amp;quot;\t`uvm_object_utils(&amp;quot;+name_seq+&amp;quot;)\n\n&amp;quot;) f.write(&amp;quot;\tfunction new(string name=\&amp;quot;&amp;quot;+name_seq+&amp;quot;\&amp;quot;);\n&amp;quot;) f.write(&amp;quot;\t\tsuper.new(name);\n&amp;quot;) f.write(&amp;quot;\tendfunction\n\n&amp;quot;) f.write(&amp;quot;\tvirtual task body();\n&amp;quot;) f.write(&amp;quot;\t\t&amp;quot;+name_trans+&amp;quot; tr;\n&amp;quot;) f.write(&amp;quot;\t\trepeat(10) begin\n&amp;quot;) f.write(&amp;quot;\t\t\t`uvm_do(tr)\n&amp;quot;) f.write(&amp;quot;\t\tend\n&amp;quot;) f.write(&amp;quot;\t\tendtask\n&amp;quot;) f.write(&amp;quot;endclass\n\n&amp;quot;) name_sqr = name+&amp;quot;_sqr&amp;quot; f.</description></item><item><title>正态分布随机化item</title><link>https://cslgbk.github.io/posts/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E9%9A%8F%E6%9C%BAitem/</link><pubDate>Mon, 12 Apr 2021 10:33:21 +0800</pubDate><guid>https://cslgbk.github.io/posts/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E9%9A%8F%E6%9C%BAitem/</guid><description>&lt;h1 id="1总体思路">1.总体思路&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->通过正态分布generator产生数据传递item，最终通过driver将数据打印至日志文件，利用python脚本绘制分布图，检验产生数据是否正确&lt;!-- raw HTML omitted -->&lt;/p></description></item></channel></rss>